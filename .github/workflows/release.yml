name: Release Changelog

# Trigger on any pushed tag matching vMAJOR.MINOR.PATCH (e.g. v1.2.3)
# and also once per week (Sunday at midnight UTC)
on:
  push:
    tags:
      - "v*.*.*"
  schedule:
    - cron: "0 0 * * 0"

permissions:
  contents: write # allow the workflow to push commits back

jobs:
  update-changelog:
    name: Generate & Commit CHANGELOG
    runs-on: ubuntu-latest
    steps:
      # 1. Fetch full git history so git-changelog can see all commits
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Checkout main branch
      - name: Ensure we're on main branch
        run: git checkout main

      # 3. Install your tools
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install git-changelog
        run: pip install git-changelog

      # 4. Generate or update CHANGELOG.md in-place, using pyproject.toml config
      - name: Update CHANGELOG
        run: git-changelog

      # 5. Commit & push if there are changes
      - name: Commit changelog, tag, and push
        id: commit_and_tag
        run: |
          # Only commit if CHANGELOG.md was modified
          if [[ -n "$(git status --porcelain CHANGELOG.md)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            git add CHANGELOG.md
            git commit -m "docs: bump changelog"

            VERSION=$(grep -oP '^## \[\Kv[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n 1 | sed 's/^v//')
            echo "version=$VERSION" >> $GITHUB_OUTPUT

            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "❌ ERROR: Extracted version '$VERSION' is not a valid semantic version."
              exit 1
            fi

            if git rev-parse "v$VERSION" >/dev/null 2>&1 || git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
              echo "❌ ERROR: Tag v$VERSION already exists. Aborting to prevent overwrite."
              exit 1
            fi


            git tag "v$VERSION"

            git push origin HEAD
            git push origin "v$VERSION"
          else
            echo "No changes to CHANGELOG.md, skipping commit."
          fi

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --notes-file CHANGELOG.md
