name: Release Changelog

# Trigger on any pushed tag matching vMAJOR.MINOR.PATCH (e.g. v1.2.3)
# and also once per week (Sunday at midnight UTC)
on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"

permissions:
  contents: write # allow the workflow to push commits back

jobs:
  update-changelog:
    name: Generate & Commit CHANGELOG
    runs-on: ubuntu-latest
    steps:
      # 1. Fetch full git history so git-changelog can see all commits
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Checkout main branch
      - name: Checkout Main
        run: git checkout main

      # 3. Install your tools
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install git-changelog
        run: pip install git-changelog

      # 4. Generate or update CHANGELOG.md in-place, using pyproject.toml config
      - name: Generate and commit changelog
        id: changelog
        run: |
          git-changelog

          # Extract the latest version block
          awk '
            /^## \[v?[0-9]+\.[0-9]+\.[0-9]+\]/ { if (++i == 2) exit } i == 1 { print }
          ' CHANGELOG.md > LATEST_CHANGELOG.md

          # Check if it contains any section headers (###) or bullet points (-)
          if ! grep -Eq '^(### |- )' LATEST_CHANGELOG.md; then
            echo "⚠️ Changelog update skipped: latest version section is empty."
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "Debug: skip=true written to $GITHUB_OUTPUT"
            exit 0
          fi

          # Only commit if CHANGELOG.md was modified
          if [[ -n "$(git status --porcelain CHANGELOG.md)" ]]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add CHANGELOG.md
          git commit -m "docs: bump changelog"
          git push origin HEAD
          else
            echo "No changes to CHANGELOG.md, skipping commit."
          fi

          # Extract version from CHANGELOG.md
          VERSION=$(grep -oP '^## \[\Kv[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n 1 | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 5. Tag version if valid & new version in CHANGELOG.md
      - name: Tag version
        id: tag
        if: steps.changelog.outputs.skip != 'true'
        run: |
          VERSION=${{ steps.changelog.outputs.version }}

          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ ERROR: Extracted version '$VERSION' is not a valid semantic version."
          exit 1
          fi

          if git rev-parse "v$VERSION" >/dev/null 2>&1 || git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
          echo "❌ ERROR: Tag v$VERSION already exists. Aborting to prevent overwrite."
          exit 1
          else
          git tag "v$VERSION"
          git push origin "v$VERSION"
          fi

      # 6. Create a release based on newly generated tag
      - name: Extract latest changelog section
        id: release
        if: steps.changelog.outputs.skip != 'true'
        run: |
          awk '/^## \[v?[0-9]+\.[0-9]+\.[0-9]+/{i++} i==1' CHANGELOG.md > LATEST_CHANGELOG.md

      - name: Create GitHub Release
        if: steps.changelog.outputs.skip != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.changelog.outputs.version }}
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "⚠️ Release v$VERSION already exists. Skipping."
          else
            gh release create "v$VERSION" \
              --title "Release v$VERSION" \
              --notes-file LATEST_CHANGELOG.md
          fi
